using Microsoft.Win32;
using Microsoft.WindowsAPICodePack.Dialogs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Input;

namespace ApexVoicelineHelper
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public string ApexDir { get => Properties.Settings.Default.apexDir; }
        public string AutoexecCfg { get => ApexDir + @"\cfg\autoexec.cfg"; }
        public string VoicelinesCfg { get => ApexDir + @"\cfg\voicelines.cfg"; }
        public string VoicelinesInfo { get => Properties.Settings.Default.voicelineIDsFile; }

        public List<Voiceline> Voicelines { get; } = new List<Voiceline>();
        public List<string> VoicelineIDs { get; } = new List<string>();

        public MainWindow()
        {
            InitializeComponent();
            Application.Current.MainWindow = this;

            tbVoicelineInfoFile.Text = VoicelinesInfo;
            tbApexDir.Text = ApexDir;
            ValidateAll();
        }

        public void ValidateAll()
        {
            UpdateSettings();
            bool validFiles = File.Exists(AutoexecCfg) && File.Exists(VoicelinesCfg) && File.Exists(VoicelinesInfo);
            if (validFiles)
            {
                if (string.IsNullOrWhiteSpace(File.ReadAllText(AutoexecCfg)))
                {
                    string[] lines = { "exec voicelines.cfg", "bind \"F7\" \"exec autoexec\"" };
                    WriteToFile(AutoexecCfg, lines);
                }
                PopulateVoicelines();
                btnAdd.IsEnabled = true;
                lbParsedVoicelines.IsEnabled = true;
            }
            else
            {
                btnAdd.IsEnabled = false;
                lbParsedVoicelines.IsEnabled = false;
                lbParsedVoicelines.SelectedItem = null;
            }
        }

        public void ValidateAll(object sender, EventArgs e) => ValidateAll();

        private void AddVoiceline(Voiceline voiceline, bool updateCfg = true)
        {
            Voicelines.Add(voiceline);
            if (updateCfg)
                UpdateVoicelinesAndCfg();
        }

        private void RemoveVoiceline(Voiceline voiceline, bool updateCfg = true)
        {
            Voicelines.Remove(voiceline);
            if (updateCfg)
                UpdateVoicelinesAndCfg();
        }

        private void UpdateVoicelinesAndCfg()
        {
            var orderedVLs = Voicelines.OrderBy(vl => vl.ID);
            lbParsedVoicelines.Items.Clear();
            foreach (var vl in orderedVLs)
                lbParsedVoicelines.Items.Add(vl);
            WriteToFile(VoicelinesCfg, orderedVLs.Select(vl => vl.Command.ToString()).ToArray());
        }

        private void PopulateVoicelines()
        {
            List<Command> commands = new List<Command>();
            foreach (var line in File.ReadAllLines(VoicelinesCfg).Where(l => l.StartsWith("bind") && l.Contains("ClientCommand_Quickchat")))
            {
                var command = Command.Parse(line);
                int.TryParse(command.Args[2].Split(' ')[1], out int voicelineID);
                command.Comment = File.ReadLines(VoicelinesInfo).Skip(voicelineID - 1).Take(1).First().Replace(",", "");
                commands.Add(command);
            }
            Voicelines.Clear();
            foreach (var cmd in commands)
                Voicelines.Add(new Voiceline(cmd, cmd.Comment));
            UpdateVoicelinesAndCfg();

            VoicelineIDs.Clear();
            foreach (var line in File.ReadAllLines(VoicelinesInfo))
                VoicelineIDs.Add(line.Replace(",", ""));
        }

        private void WriteToFile(string filePath, string[] lines, bool append = false)
        {
            using (var file = new StreamWriter(filePath, append))
            {
                file.WriteLine("// -----------------------------");
                file.WriteLine("// Generated by Voiceline Helper (made by Unordinal :D )");
                file.WriteLine("// -----------------------------");
                foreach (var line in lines)
                    file.WriteLine(line);
                file.WriteLine("// -----------------------------");
            }
        }

        private void UpdateSettings()
        {
            Properties.Settings.Default.apexDir = tbApexDir.Text;
            Properties.Settings.Default.voicelineIDsFile = tbVoicelineInfoFile.Text;
            Properties.Settings.Default.Save();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            UpdateSettings();
            Properties.Settings.Default.MainWindowPlacement = this.GetPlacement();
            Properties.Settings.Default.Save();
            Application.Current.Shutdown();
        }

        protected override void OnSourceInitialized(EventArgs e)
        {
            base.OnSourceInitialized(e);
            this.SetPlacement(Properties.Settings.Default.MainWindowPlacement);
        }

        private void BtnBrowseVoicelineInfo_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new OpenFileDialog()
            {
                Filter = "Voiceline Info (*.txt)|*.txt",
                AddExtension = true
            };
            if (dialog.ShowDialog() == true)
            {
                tbVoicelineInfoFile.Text = dialog.FileName;
                ValidateAll();
            }
        }

        private void BtnBrowseApexDir_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new CommonOpenFileDialog())
            {
                dialog.IsFolderPicker = true;

                if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
                {
                    tbApexDir.Text = dialog.FileName;
                    ValidateAll();
                }
            }
        }

        private void BtnAdd_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new VoicelineDialog(VoicelineIDs);
            if (dialog.ShowDialog() == true)
                AddVoiceline(new Voiceline(dialog.Key, VoicelineIDs.IndexOf(dialog.Name) + 1, dialog.Name));
        }

        private void BtnEdit_Click(object sender, RoutedEventArgs e)
        {
            var vlToEdit = lbParsedVoicelines.SelectedItem as Voiceline;
            var dialog = new VoicelineDialog(VoicelineIDs, vlToEdit);
            if (dialog.ShowDialog() == true)
            {
                RemoveVoiceline(vlToEdit, false);
                AddVoiceline(new Voiceline(dialog.Key, VoicelineIDs.IndexOf(dialog.Name) + 1, dialog.Name));
            }
        }

        private void BtnRemove_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                $"Are you sure you want to remove \"{(lbParsedVoicelines.SelectedItem as Voiceline)?.Name}\"?", 
                "Remove Voiceline", 
                MessageBoxButton.YesNo, 
                MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
                RemoveVoiceline(lbParsedVoicelines.SelectedItem as Voiceline);
        }

        private void LbParsedVoicelines_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (lbParsedVoicelines.SelectedItem != null)
            {
                btnEdit.IsEnabled = true;
                btnRemove.IsEnabled = true;
            }
            else
            {
                btnEdit.IsEnabled = false;
                btnRemove.IsEnabled = false;
            }
        }
    }
}
